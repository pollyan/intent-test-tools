name: Python Tests (Unit + API)

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r web_gui/requirements.txt
        pip install pytest pytest-cov pytest-html pytest-mock pytest-json-report
        pip install factory-boy faker
        pip install sqlalchemy
        pip install flask-socketio python-socketio
    
    - name: Debug - Check environment
      run: |
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Installed packages:"
        pip list
        echo "Directory structure:"
        ls -la
        echo "Test directory:"
        ls -la tests/
        echo "Unit test directory:"
        ls -la tests/unit/
        echo "Testing imports:"
        python -c "import sys; print('Python path:', sys.path)"
        python -c "from web_gui import models; print('Import models OK')" || echo "Failed to import models"
        python -c "from tests.unit import factories; print('Import factories OK')" || echo "Failed to import factories"
    
    - name: Run all tests with coverage
      run: |
        python -m pytest tests/unit/ tests/api/ -v --tb=short --cov=web_gui --cov-report=xml --cov-report=html --html=test-report.html --self-contained-html
      env:
        TESTING: "true"
        DATABASE_URL: "sqlite:///:memory:"
        PYTHONPATH: ${{ github.workspace }}
        SQLALCHEMY_SILENCE_UBER_WARNING: "1"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-report.html
          htmlcov/
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Generate Test Summary
      if: always()
      run: |
        # 生成详细的测试摘要
        echo "## 📊 Test Results for Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 添加环境信息
        echo "### 🔧 Environment" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Python Version | ${{ matrix.python-version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Runner OS | ${{ runner.os }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Time | $(date '+%Y-%m-%d %H:%M:%S') UTC |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 运行所有测试并生成JSON报告
        python -m pytest tests/unit/ tests/api/ --tb=short --json-report --json-report-file=test-report.json --tb=line || true
        
        # 解析测试结果
        if [ -f test-report.json ]; then
          # 提取测试统计信息
          TOTAL=$(python -c "import json; data=json.load(open('test-report.json')); print(data['summary']['total'])")
          PASSED=$(python -c "import json; data=json.load(open('test-report.json')); print(data['summary'].get('passed', 0))")
          FAILED=$(python -c "import json; data=json.load(open('test-report.json')); print(data['summary'].get('failed', 0))")
          SKIPPED=$(python -c "import json; data=json.load(open('test-report.json')); print(data['summary'].get('skipped', 0))")
          ERRORS=$(python -c "import json; data=json.load(open('test-report.json')); print(data['summary'].get('error', 0))")
          DURATION=$(python -c "import json; data=json.load(open('test-report.json')); print(f\"{data['duration']:.2f}\")")
          
          # 计算通过率
          if [ "$TOTAL" -gt 0 ]; then
            PASS_RATE=$(python -c "print(f'{($PASSED/$TOTAL)*100:.1f}')")
          else
            PASS_RATE="0.0"
          fi
          
          # 添加测试摘要
          echo "### 📈 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Tests | $TOTAL |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed | $PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed | $FAILED |" >> $GITHUB_STEP_SUMMARY
          echo "| ⏭️ Skipped | $SKIPPED |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔥 Errors | $ERRORS |" >> $GITHUB_STEP_SUMMARY
          echo "| ⏱️ Duration | ${DURATION}s |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Pass Rate | ${PASS_RATE}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 如果有失败的测试，列出失败详情
          if [ "$FAILED" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
            echo "### ❌ Failed Tests" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            python -m pytest tests/unit/ tests/api/ --tb=short -v | grep -E "(FAILED|ERROR)" | head -20 >> $GITHUB_STEP_SUMMARY || true
            echo "```" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 添加覆盖率信息（如果存在）
          if [ -f coverage.xml ]; then
            COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree=ET.parse('coverage.xml'); root=tree.getroot(); print(f\"{float(root.attrib['line-rate'])*100:.1f}\")" 2>/dev/null || echo "N/A")
            echo "### 📊 Code Coverage" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Line Coverage | ${COVERAGE}% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        else
          # 如果没有JSON报告，使用基本输出
          echo "### 📋 Test Output" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          python -m pytest tests/unit/ tests/api/ --tb=short -v | tail -30 >> $GITHUB_STEP_SUMMARY || true
          echo "```" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 添加测试文件列表
        echo "### 📁 Test Files" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### Unit Tests" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        find tests/unit/ -name "test_*.py" -type f | sort >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### API Tests" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        find tests/api/ -name "test_*.py" -type f | sort >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY