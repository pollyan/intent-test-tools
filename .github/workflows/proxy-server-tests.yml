name: Proxy Server Tests (Node.js)

on:
  push:
    branches: [ master, main ]
    paths: 
      - 'midscene_server.js'
      - 'tests/proxy/**'
      - 'package.json'
      - 'jest.config.js'
      - '.github/workflows/proxy-server-tests.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'midscene_server.js'
      - 'tests/proxy/**'
      - 'package.json'
      - 'jest.config.js'
      - '.github/workflows/proxy-server-tests.yml'
  workflow_dispatch:

jobs:
  proxy-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        # 删除package-lock.json重新生成以确保同步
        rm -f package-lock.json
        npm install
        # 安装测试框架核心依赖
        npm install --save-dev jest @jest/globals jest-environment-node jest-junit
        # 安装HTTP测试相关依赖（包括依赖链）
        npm install --save-dev supertest superagent qs
        # 安装WebSocket相关依赖
        npm install --save-dev ws
        # 安装Socket.IO相关依赖
        npm install socket.io socket.io-client engine.io engine.io-client
        # 验证关键依赖安装
        echo "验证测试依赖安装状态:"
        npm list jest supertest qs || true
        npm list socket.io socket.io-client engine.io-client || true

    - name: Debug - Check environment
      run: |
        echo "Current directory: $(pwd)"
        echo "Node.js version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Installed packages:"
        npm list --depth=0
        echo "Directory structure:"
        ls -la
        echo "Proxy test directory:"
        ls -la tests/proxy/ || echo "Proxy test directory not found"
        echo "Environment variables:"
        env | grep -E '^(NODE_|npm_)' || true

    - name: Verify test files
      run: |
        echo "📁 Checking test files..."
        find tests/proxy -name "*.test.js" -type f | head -10
        echo "📁 Checking mock files..."
        find tests/proxy/mocks -name "*.js" -type f | head -10
        echo "📁 Checking Jest config..."
        cat jest.config.js | head -20
        echo "📁 Checking package.json test scripts..."
        npm run | grep test || echo "No test scripts found"

    - name: Lint proxy server code (optional)
      run: |
        # 安装基础的linting工具
        npm install --save-dev eslint || true
        # 如果有eslint配置，运行lint检查
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "package.json" ]; then
          npx eslint midscene_server.js || echo "Linting skipped - no configuration found"
        else
          echo "ESLint configuration not found, skipping linting"
        fi

    - name: Run proxy server tests
      run: |
        echo "🚀 Starting proxy server tests..."
        echo "Node.js version: $(node --version)"
        echo "Test port: 3002"
        
        # 设置测试环境变量
        export NODE_ENV=test
        export PORT=3002
        export TESTING=true
        export OPENAI_API_KEY=test-api-key
        export OPENAI_BASE_URL=https://test-api.com/v1
        export MIDSCENE_MODEL_NAME=test-model
        export DEBUG_TESTS=false
        
        # 运行测试
        npm run test:proxy:ci
      env:
        NODE_ENV: test
        PORT: 3002
        TESTING: true
        OPENAI_API_KEY: test-api-key
        OPENAI_BASE_URL: https://test-api.com/v1
        MIDSCENE_MODEL_NAME: test-model

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: proxy-test-results-node-${{ matrix.node-version }}
        path: |
          test-results/proxy/
          coverage/proxy/
          *.xml
        retention-days: 7

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        files: ./coverage/proxy/lcov.info
        flags: proxy-server
        name: proxy-server-codecov
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Generate Test Summary
      if: always()
      run: |
        echo "## 📊 Proxy Server Test Results for Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 添加环境信息
        echo "### 🔧 Environment" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Node.js Version | ${{ matrix.node-version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Runner OS | ${{ runner.os }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Time | $(date '+%Y-%m-%d %H:%M:%S') UTC |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Port | 3002 |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 检查测试结果文件
        if [ -f test-results/proxy/junit.xml ]; then
          echo "### 📈 Test Summary" >> $GITHUB_STEP_SUMMARY
          
          # 解析JUnit XML文件获取测试统计
          if [ -f test-results/proxy/junit.xml ] && command -v python3 >/dev/null 2>&1; then
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            
            # 使用简单的方式解析测试结果
            TOTAL_TESTS=$(grep -o 'tests="[0-9]*"' test-results/proxy/junit.xml | grep -o '[0-9]*' || echo "0")
            FAILURES=$(grep -o 'failures="[0-9]*"' test-results/proxy/junit.xml | grep -o '[0-9]*' || echo "0")
            ERRORS=$(grep -o 'errors="[0-9]*"' test-results/proxy/junit.xml | grep -o '[0-9]*' || echo "0")
            
            PASSED=$((TOTAL_TESTS - FAILURES - ERRORS))
            
            echo "| Total Tests | ${TOTAL_TESTS} |" >> $GITHUB_STEP_SUMMARY
            echo "| ✅ Passed | ${PASSED} |" >> $GITHUB_STEP_SUMMARY
            echo "| ❌ Failed | ${FAILURES} |" >> $GITHUB_STEP_SUMMARY
            echo "| 🔥 Errors | ${ERRORS} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Status | Test results processing |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Info | Test results available in artifacts |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "### 📋 Test Output" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "Test results file not found. Check test execution logs above." >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 添加覆盖率信息（如果存在）
        if [ -f coverage/proxy/lcov.info ]; then
          echo "### 📊 Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          
          # 解析lcov文件获取覆盖率
          if command -v grep >/dev/null 2>&1 && command -v awk >/dev/null 2>&1; then
            LINES_FOUND=$(grep -c "LF:" coverage/proxy/lcov.info || echo "0")
            LINES_HIT=$(grep -c "LH:" coverage/proxy/lcov.info || echo "0")
            
            if [ "$LINES_FOUND" -gt 0 ]; then
              COVERAGE=$(awk 'BEGIN{print ('$LINES_HIT'/'$LINES_FOUND')*100}')
              echo "| Line Coverage | ${COVERAGE}% |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Line Coverage | N/A |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Line Coverage | Available in artifacts |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 添加测试文件列表
        echo "### 📁 Test Files" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### Proxy Server Tests" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        find tests/proxy/ -name "*.test.js" -type f | sort >> $GITHUB_STEP_SUMMARY || echo "No test files found" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### Mock Files" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        find tests/proxy/mocks/ -name "*.js" -type f | sort >> $GITHUB_STEP_SUMMARY || echo "No mock files found" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY

  # 通知作业 - 只在所有测试完成后运行
  notify:
    runs-on: ubuntu-latest
    needs: proxy-tests
    if: always()
    steps:
    - name: Test Results Notification
      run: |
        echo "## 🎯 Proxy Server Tests Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Node.js 20.x**: ${{ needs.proxy-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Python Tests Workflow](https://github.com/${{ github.repository }}/actions/workflows/python-tests.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- [All Actions](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.proxy-tests.result }}" == "success" ]; then
          echo "✅ All proxy server tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some proxy server tests failed. Check the logs above." >> $GITHUB_STEP_SUMMARY
        fi